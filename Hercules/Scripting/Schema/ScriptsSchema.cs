// Author: Igor compiler
// Compiler version: igorc 2.1.3
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;

using JsonSerializer = Json.Serialization.JsonSerializer;

namespace Hercules.Scripting
{
    public enum ScriptScope
    {
        Script = 1,
    }

    public sealed class ScriptDocument
    {
        public ScriptScope Scope { get; set; } = ScriptScope.Script;

        public string? Name { get; set; }

        public string? Icon { get; set; }

        public string? MenuCategory { get; set; }

        public bool? ShowInToolbar { get; set; }

        public string Script { get; set; }
    }

    public sealed class ScriptScopeJsonSerializer : Json.Serialization.IJsonSerializer<ScriptScope>, Json.Serialization.IJsonKeySerializer<ScriptScope>
    {
        public static readonly ScriptScopeJsonSerializer Instance = new ScriptScopeJsonSerializer();

        public Json.ImmutableJson Serialize(ScriptScope value)
        {
            return SerializeKey(value);
        }

        public ScriptScope Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ScriptScope value)
        {
            return value switch
            {
                ScriptScope.Script => "script",
                _ => throw new System.ArgumentOutOfRangeException(nameof(value))
            };
        }

        public ScriptScope DeserializeKey(string jsonKey)
        {
            return jsonKey switch
            {
                "script" => ScriptScope.Script,
                _ => throw new System.ArgumentOutOfRangeException(nameof(jsonKey))
            };
        }
    }

    public sealed class ScriptDocumentJsonSerializer : Json.Serialization.IJsonSerializer<ScriptDocument>
    {
        public static readonly ScriptDocumentJsonSerializer Instance = new ScriptDocumentJsonSerializer();

        public Json.ImmutableJson Serialize(ScriptDocument value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            if (value.Script == null)
                throw new System.ArgumentException("Required property Script is null", nameof(value));
            var json = new Json.JsonObject();
            json["scope"] = ScriptScopeJsonSerializer.Instance.Serialize(value.Scope);
            if (value.Name != null)
                json["name"] = JsonSerializer.String.Serialize(value.Name);
            if (value.Icon != null)
                json["icon"] = JsonSerializer.String.Serialize(value.Icon);
            if (value.MenuCategory != null)
                json["menu_category"] = JsonSerializer.String.Serialize(value.MenuCategory);
            if (value.ShowInToolbar.HasValue)
                json["show_in_toolbar"] = JsonSerializer.Bool.Serialize(value.ShowInToolbar.Value);
            json["script"] = JsonSerializer.String.Serialize(value.Script);
            return json;
        }

        public ScriptDocument Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new ScriptDocument();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ScriptDocument value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("scope", out var jsonScope) && !jsonScope.IsNull)
                value.Scope = ScriptScopeJsonSerializer.Instance.Deserialize(jsonScope);
            if (json.AsObject.TryGetValue("name", out var jsonName) && !jsonName.IsNull)
                value.Name = JsonSerializer.String.Deserialize(jsonName);
            if (json.AsObject.TryGetValue("icon", out var jsonIcon) && !jsonIcon.IsNull)
                value.Icon = JsonSerializer.String.Deserialize(jsonIcon);
            if (json.AsObject.TryGetValue("menu_category", out var jsonMenuCategory) && !jsonMenuCategory.IsNull)
                value.MenuCategory = JsonSerializer.String.Deserialize(jsonMenuCategory);
            if (json.AsObject.TryGetValue("show_in_toolbar", out var jsonShowInToolbar) && !jsonShowInToolbar.IsNull)
                value.ShowInToolbar = JsonSerializer.Bool.Deserialize(jsonShowInToolbar);
            value.Script = JsonSerializer.String.Deserialize(json["script"]);
        }
    }
}
