// Author: Igor compiler
// Compiler version: igorc 2.1.3
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;

using JsonSerializer = Json.Serialization.JsonSerializer;

namespace CouchDB.Api
{
    public enum CdbRevisionStatus
    {
        Available = 1,
        Missing = 2,
        Deleted = 3,
    }

    public sealed class CdbVendor
    {
        public string Name { get; }

        public string? Version { get; }

        public CdbVendor(string name, string? version = null)
        {
            if (name == null)
                throw new System.ArgumentNullException(nameof(name));

            this.Name = name;
            this.Version = version;
        }
    }

    public sealed class CdbInstanceInfo
    {
        public string Couchdb { get; }

        public string Version { get; }

        public CdbVendor Vendor { get; }

        public CdbInstanceInfo(string couchdb, string version, CdbVendor vendor)
        {
            if (couchdb == null)
                throw new System.ArgumentNullException(nameof(couchdb));
            if (version == null)
                throw new System.ArgumentNullException(nameof(version));
            if (vendor == null)
                throw new System.ArgumentNullException(nameof(vendor));
            this.Couchdb = couchdb;
            this.Version = version;
            this.Vendor = vendor;
        }
    }

    public sealed class CdbDatabaseInfo
    {
        public string DbName { get; }

        public int DocCount { get; }

        public int DocDelCount { get; }

        public Json.ImmutableJson UpdateSeq { get; }

        public Json.ImmutableJson PurgeSeq { get; }

        public bool CompactRunning { get; }

        public int DiskSize { get; }

        public int DataSize { get; }

        public string InstanceStartTime { get; }

        public int DiskFormatVersion { get; }

        public CdbDatabaseInfo(string dbName, int docCount, int docDelCount, Json.ImmutableJson updateSeq, Json.ImmutableJson purgeSeq, bool compactRunning, int diskSize, int dataSize, string instanceStartTime, int diskFormatVersion)
        {
            if (dbName == null)
                throw new System.ArgumentNullException(nameof(dbName));

            if (updateSeq == null)
                throw new System.ArgumentNullException(nameof(updateSeq));
            if (purgeSeq == null)
                throw new System.ArgumentNullException(nameof(purgeSeq));

            if (instanceStartTime == null)
                throw new System.ArgumentNullException(nameof(instanceStartTime));

            this.DbName = dbName;
            this.DocCount = docCount;
            this.DocDelCount = docDelCount;
            this.UpdateSeq = updateSeq;
            this.PurgeSeq = purgeSeq;
            this.CompactRunning = compactRunning;
            this.DiskSize = diskSize;
            this.DataSize = dataSize;
            this.InstanceStartTime = instanceStartTime;
            this.DiskFormatVersion = diskFormatVersion;
        }
    }

    public sealed class CdbChangeLeaf
    {
        public string Rev { get; }

        public CdbChangeLeaf(string rev)
        {
            if (rev == null)
                throw new System.ArgumentNullException(nameof(rev));
            this.Rev = rev;
        }
    }

    public sealed class CdbChange
    {
        public string Id { get; }

        public Json.ImmutableJson Seq { get; }

        public IReadOnlyList<CdbChangeLeaf> Changes { get; }

        public bool Deleted { get; }

        public Json.ImmutableJson? Doc { get; }

        public CdbChange(string id, Json.ImmutableJson seq, IReadOnlyList<CdbChangeLeaf> changes, bool deleted = false, Json.ImmutableJson? doc = null)
        {
            if (id == null)
                throw new System.ArgumentNullException(nameof(id));
            if (seq == null)
                throw new System.ArgumentNullException(nameof(seq));
            if (changes == null)
                throw new System.ArgumentNullException(nameof(changes));

            this.Id = id;
            this.Seq = seq;
            this.Changes = changes;
            this.Deleted = deleted;
            this.Doc = doc;
        }
    }

    public sealed class CdbChanges
    {
        public Json.ImmutableJson LastSeq { get; }

        public IReadOnlyList<CdbChange> Results { get; }

        public CdbChanges(Json.ImmutableJson lastSeq, IReadOnlyList<CdbChange> results)
        {
            if (lastSeq == null)
                throw new System.ArgumentNullException(nameof(lastSeq));
            if (results == null)
                throw new System.ArgumentNullException(nameof(results));
            this.LastSeq = lastSeq;
            this.Results = results;
        }
    }

    public sealed class CdbDocRowValue
    {
        public string Rev { get; }

        public CdbDocRowValue(string rev)
        {
            if (rev == null)
                throw new System.ArgumentNullException(nameof(rev));
            this.Rev = rev;
        }
    }

    public sealed class CdbDocRow
    {
        public string Id { get; }

        public string Key { get; }

        public CdbDocRowValue Value { get; }

        public Json.ImmutableJson? Doc { get; }

        public CdbDocRow(string id, string key, CdbDocRowValue value, Json.ImmutableJson? doc = null)
        {
            if (id == null)
                throw new System.ArgumentNullException(nameof(id));
            if (key == null)
                throw new System.ArgumentNullException(nameof(key));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            this.Id = id;
            this.Key = key;
            this.Value = value;
            this.Doc = doc;
        }
    }

    public sealed class CdbAllDocs
    {
        public int TotalRows { get; }

        public int Offset { get; }

        public IReadOnlyList<CdbDocRow> Rows { get; }

        public CdbAllDocs(int totalRows, int offset, IReadOnlyList<CdbDocRow> rows)
        {
            if (rows == null)
                throw new System.ArgumentNullException(nameof(rows));
            this.TotalRows = totalRows;
            this.Offset = offset;
            this.Rows = rows;
        }
    }

    public sealed class CdbDocumentOperationResponse
    {
        public string Id { get; }

        public bool Ok { get; }

        public string Rev { get; }

        public CdbDocumentOperationResponse(string id, bool ok, string rev)
        {
            if (id == null)
                throw new System.ArgumentNullException(nameof(id));

            if (rev == null)
                throw new System.ArgumentNullException(nameof(rev));
            this.Id = id;
            this.Ok = ok;
            this.Rev = rev;
        }
    }

    public sealed class CdbAttachment
    {
        public string? ContentType { get; set; }

        public byte[]? Data { get; set; }

        public string? Digest { get; set; }

        public int? EncodedLength { get; set; }

        public string? Encoding { get; set; }

        public int? Length { get; set; }

        public int? Revpos { get; set; }

        public bool? Stub { get; set; }

        public bool? Follows { get; set; }
    }

    public sealed class CdbDocumentRevisions
    {
        public IReadOnlyList<string> Ids { get; }

        public int Start { get; }

        public CdbDocumentRevisions(IReadOnlyList<string> ids, int start)
        {
            if (ids == null)
                throw new System.ArgumentNullException(nameof(ids));

            this.Ids = ids;
            this.Start = start;
        }
    }

    public sealed class CdbRevisionInfo
    {
        public string Rev { get; }

        public CdbRevisionStatus Status { get; }

        public CdbRevisionInfo(string rev, CdbRevisionStatus status)
        {
            if (rev == null)
                throw new System.ArgumentNullException(nameof(rev));

            this.Rev = rev;
            this.Status = status;
        }
    }

    public sealed class CdbDocumentInfo
    {
        public string Id { get; }

        public string Rev { get; }

        public bool? Deleted { get; }

        public IReadOnlyDictionary<string, CdbAttachment>? Attachments { get; }

        public Json.ImmutableJson? Conflicts { get; }

        public Json.ImmutableJson? DeletedConflicts { get; }

        public int? LocalSeq { get; }

        public IReadOnlyList<CdbRevisionInfo>? RevsInfo { get; }

        public CdbDocumentRevisions? Revisions { get; }

        public CdbDocumentInfo(string id, string rev, bool? deleted = null, IReadOnlyDictionary<string, CdbAttachment>? attachments = null, Json.ImmutableJson? conflicts = null, Json.ImmutableJson? deletedConflicts = null, int? localSeq = null, IReadOnlyList<CdbRevisionInfo>? revsInfo = null, CdbDocumentRevisions? revisions = null)
        {
            if (id == null)
                throw new System.ArgumentNullException(nameof(id));
            if (rev == null)
                throw new System.ArgumentNullException(nameof(rev));

            this.Id = id;
            this.Rev = rev;
            this.Deleted = deleted;
            this.Attachments = attachments;
            this.Conflicts = conflicts;
            this.DeletedConflicts = deletedConflicts;
            this.LocalSeq = localSeq;
            this.RevsInfo = revsInfo;
            this.Revisions = revisions;
        }
    }

    public sealed class CdbViewSpec
    {
        public string Map { get; }

        public string? Reduce { get; }

        public CdbViewSpec(string map, string? reduce = null)
        {
            if (map == null)
                throw new System.ArgumentNullException(nameof(map));

            this.Map = map;
            this.Reduce = reduce;
        }
    }

    public sealed class CdbViewResultRow
    {
        public string Id { get; }

        public Json.ImmutableJson Key { get; }

        public Json.ImmutableJson Value { get; }

        public CdbViewResultRow(string id, Json.ImmutableJson key, Json.ImmutableJson value)
        {
            if (id == null)
                throw new System.ArgumentNullException(nameof(id));
            if (key == null)
                throw new System.ArgumentNullException(nameof(key));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            this.Id = id;
            this.Key = key;
            this.Value = value;
        }
    }

    public sealed class CdbViewResult
    {
        public int Offset { get; }

        public IReadOnlyList<CdbViewResultRow> Rows { get; }

        public int TotalRows { get; }

        public int? UpdateSeq { get; }

        public CdbViewResult(int offset, IReadOnlyList<CdbViewResultRow> rows, int totalRows, int? updateSeq = null)
        {
            if (rows == null)
                throw new System.ArgumentNullException(nameof(rows));

            this.Offset = offset;
            this.Rows = rows;
            this.TotalRows = totalRows;
            this.UpdateSeq = updateSeq;
        }
    }

    public sealed class CdbReplicationDatabase
    {
        public System.Uri Url { get; }

        public IReadOnlyDictionary<string, string> Headers { get; }

        public CdbReplicationDatabase(System.Uri url, IReadOnlyDictionary<string, string> headers)
        {
            if (url == null)
                throw new System.ArgumentNullException(nameof(url));
            if (headers == null)
                throw new System.ArgumentNullException(nameof(headers));
            this.Url = url;
            this.Headers = headers;
        }
    }

    public sealed class CdbReplicationRequest
    {
        public CdbReplicationDatabase Source { get; }

        public CdbReplicationDatabase Target { get; }

        public bool? Cancel { get; }

        public bool? Continuous { get; }

        public bool? CreateTarget { get; }

        public IReadOnlyList<string>? DocIds { get; }

        public string? Proxy { get; }

        public CdbReplicationRequest(CdbReplicationDatabase source, CdbReplicationDatabase target, bool? cancel = null, bool? continuous = null, bool? createTarget = null, IReadOnlyList<string>? docIds = null, string? proxy = null)
        {
            if (source == null)
                throw new System.ArgumentNullException(nameof(source));
            if (target == null)
                throw new System.ArgumentNullException(nameof(target));

            this.Source = source;
            this.Target = target;
            this.Cancel = cancel;
            this.Continuous = continuous;
            this.CreateTarget = createTarget;
            this.DocIds = docIds;
            this.Proxy = proxy;
        }
    }

    public sealed class CdbReplicationResult
    {
        public IReadOnlyList<CdbReplicationHistory> History { get; }

        public bool Ok { get; }

        public int ReplicationIdVersion { get; }

        public string SessionId { get; }

        public Json.ImmutableJson SourceLastSeq { get; }

        public CdbReplicationResult(IReadOnlyList<CdbReplicationHistory> history, bool ok, int replicationIdVersion, string sessionId, Json.ImmutableJson sourceLastSeq)
        {
            if (history == null)
                throw new System.ArgumentNullException(nameof(history));

            if (sessionId == null)
                throw new System.ArgumentNullException(nameof(sessionId));
            if (sourceLastSeq == null)
                throw new System.ArgumentNullException(nameof(sourceLastSeq));
            this.History = history;
            this.Ok = ok;
            this.ReplicationIdVersion = replicationIdVersion;
            this.SessionId = sessionId;
            this.SourceLastSeq = sourceLastSeq;
        }
    }

    public sealed class CdbReplicationHistory
    {
        public int DocWriteFailures { get; }

        public int DocsRead { get; }

        public int DocsWritten { get; }

        public Json.ImmutableJson EndLastSeq { get; }

        public string EndTime { get; }

        public int MissingChecked { get; }

        public int MissingFound { get; }

        public Json.ImmutableJson RecordedSeq { get; }

        public string SessionId { get; }

        public int StartLastSeq { get; }

        public string StartTime { get; }

        public CdbReplicationHistory(int docWriteFailures, int docsRead, int docsWritten, Json.ImmutableJson endLastSeq, string endTime, int missingChecked, int missingFound, Json.ImmutableJson recordedSeq, string sessionId, int startLastSeq, string startTime)
        {
            if (endLastSeq == null)
                throw new System.ArgumentNullException(nameof(endLastSeq));
            if (endTime == null)
                throw new System.ArgumentNullException(nameof(endTime));

            if (recordedSeq == null)
                throw new System.ArgumentNullException(nameof(recordedSeq));
            if (sessionId == null)
                throw new System.ArgumentNullException(nameof(sessionId));

            if (startTime == null)
                throw new System.ArgumentNullException(nameof(startTime));
            this.DocWriteFailures = docWriteFailures;
            this.DocsRead = docsRead;
            this.DocsWritten = docsWritten;
            this.EndLastSeq = endLastSeq;
            this.EndTime = endTime;
            this.MissingChecked = missingChecked;
            this.MissingFound = missingFound;
            this.RecordedSeq = recordedSeq;
            this.SessionId = sessionId;
            this.StartLastSeq = startLastSeq;
            this.StartTime = startTime;
        }
    }

    public sealed class CdbVendorJsonSerializer : Json.Serialization.IJsonSerializer<CdbVendor>
    {
        public static readonly CdbVendorJsonSerializer Instance = new CdbVendorJsonSerializer();

        public Json.ImmutableJson Serialize(CdbVendor value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Name == null)
                throw new System.ArgumentException("Required property Name is null", nameof(value));

            var json = new Json.JsonObject();
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            if (value.Version != null)
                json["version"] = JsonSerializer.String.Serialize(value.Version);
            return json;
        }

        public CdbVendor Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var name = JsonSerializer.String.Deserialize(json["name"]);
            string? version;
            if (json.AsObject.TryGetValue("version", out var jsonVersion) && !jsonVersion.IsNull)
                version = JsonSerializer.String.Deserialize(jsonVersion);
            else
                version = null;
            return new CdbVendor(name, version);
        }
    }

    public sealed class CdbInstanceInfoJsonSerializer : Json.Serialization.IJsonSerializer<CdbInstanceInfo>
    {
        public static readonly CdbInstanceInfoJsonSerializer Instance = new CdbInstanceInfoJsonSerializer();

        public Json.ImmutableJson Serialize(CdbInstanceInfo value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Couchdb == null)
                throw new System.ArgumentException("Required property Couchdb is null", nameof(value));
            if (value.Version == null)
                throw new System.ArgumentException("Required property Version is null", nameof(value));
            if (value.Vendor == null)
                throw new System.ArgumentException("Required property Vendor is null", nameof(value));
            return new Json.JsonObject
            {
                ["couchdb"] = JsonSerializer.String.Serialize(value.Couchdb),
                ["version"] = JsonSerializer.String.Serialize(value.Version),
                ["vendor"] = CdbVendorJsonSerializer.Instance.Serialize(value.Vendor)
            };
        }

        public CdbInstanceInfo Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var couchdb = JsonSerializer.String.Deserialize(json["couchdb"]);
            var version = JsonSerializer.String.Deserialize(json["version"]);
            var vendor = CdbVendorJsonSerializer.Instance.Deserialize(json["vendor"]);
            return new CdbInstanceInfo(couchdb, version, vendor);
        }
    }

    public sealed class CdbDatabaseInfoJsonSerializer : Json.Serialization.IJsonSerializer<CdbDatabaseInfo>
    {
        public static readonly CdbDatabaseInfoJsonSerializer Instance = new CdbDatabaseInfoJsonSerializer();

        public Json.ImmutableJson Serialize(CdbDatabaseInfo value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.DbName == null)
                throw new System.ArgumentException("Required property DbName is null", nameof(value));

            if (value.UpdateSeq == null)
                throw new System.ArgumentException("Required property UpdateSeq is null", nameof(value));
            if (value.PurgeSeq == null)
                throw new System.ArgumentException("Required property PurgeSeq is null", nameof(value));

            if (value.InstanceStartTime == null)
                throw new System.ArgumentException("Required property InstanceStartTime is null", nameof(value));

            return new Json.JsonObject
            {
                ["db_name"] = JsonSerializer.String.Serialize(value.DbName),
                ["doc_count"] = JsonSerializer.Int.Serialize(value.DocCount),
                ["doc_del_count"] = JsonSerializer.Int.Serialize(value.DocDelCount),
                ["update_seq"] = JsonSerializer.Json.Serialize(value.UpdateSeq),
                ["purge_seq"] = JsonSerializer.Json.Serialize(value.PurgeSeq),
                ["compact_running"] = JsonSerializer.Bool.Serialize(value.CompactRunning),
                ["disk_size"] = JsonSerializer.Int.Serialize(value.DiskSize),
                ["data_size"] = JsonSerializer.Int.Serialize(value.DataSize),
                ["instance_start_time"] = JsonSerializer.String.Serialize(value.InstanceStartTime),
                ["disk_format_version"] = JsonSerializer.Int.Serialize(value.DiskFormatVersion)
            };
        }

        public CdbDatabaseInfo Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var dbName = JsonSerializer.String.Deserialize(json["db_name"]);
            var docCount = JsonSerializer.Int.Deserialize(json["doc_count"]);
            var docDelCount = JsonSerializer.Int.Deserialize(json["doc_del_count"]);
            var updateSeq = JsonSerializer.Json.Deserialize(json["update_seq"]);
            var purgeSeq = JsonSerializer.Json.Deserialize(json["purge_seq"]);
            var compactRunning = JsonSerializer.Bool.Deserialize(json["compact_running"]);
            var diskSize = JsonSerializer.Int.Deserialize(json["disk_size"]);
            var dataSize = JsonSerializer.Int.Deserialize(json["data_size"]);
            var instanceStartTime = JsonSerializer.String.Deserialize(json["instance_start_time"]);
            var diskFormatVersion = JsonSerializer.Int.Deserialize(json["disk_format_version"]);
            return new CdbDatabaseInfo(dbName, docCount, docDelCount, updateSeq, purgeSeq, compactRunning, diskSize, dataSize, instanceStartTime, diskFormatVersion);
        }
    }

    public sealed class CdbChangeLeafJsonSerializer : Json.Serialization.IJsonSerializer<CdbChangeLeaf>
    {
        public static readonly CdbChangeLeafJsonSerializer Instance = new CdbChangeLeafJsonSerializer();

        public Json.ImmutableJson Serialize(CdbChangeLeaf value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Rev == null)
                throw new System.ArgumentException("Required property Rev is null", nameof(value));
            return new Json.JsonObject
            {
                ["rev"] = JsonSerializer.String.Serialize(value.Rev)
            };
        }

        public CdbChangeLeaf Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var rev = JsonSerializer.String.Deserialize(json["rev"]);
            return new CdbChangeLeaf(rev);
        }
    }

    public sealed class CdbChangeJsonSerializer : Json.Serialization.IJsonSerializer<CdbChange>
    {
        public static readonly CdbChangeJsonSerializer Instance = new CdbChangeJsonSerializer();

        public Json.ImmutableJson Serialize(CdbChange value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Id == null)
                throw new System.ArgumentException("Required property Id is null", nameof(value));
            if (value.Seq == null)
                throw new System.ArgumentException("Required property Seq is null", nameof(value));
            if (value.Changes == null)
                throw new System.ArgumentException("Required property Changes is null", nameof(value));

            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.String.Serialize(value.Id);
            json["seq"] = JsonSerializer.Json.Serialize(value.Seq);
            json["changes"] = JsonSerializer.ReadOnlyList(CdbChangeLeafJsonSerializer.Instance).Serialize(value.Changes);
            json["deleted"] = JsonSerializer.Bool.Serialize(value.Deleted);
            if (value.Doc != null)
                json["doc"] = JsonSerializer.Json.Serialize(value.Doc);
            return json;
        }

        public CdbChange Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var id = JsonSerializer.String.Deserialize(json["id"]);
            var seq = JsonSerializer.Json.Deserialize(json["seq"]);
            var changes = JsonSerializer.ReadOnlyList(CdbChangeLeafJsonSerializer.Instance).Deserialize(json["changes"]);
            bool deleted;
            if (json.AsObject.TryGetValue("deleted", out var jsonDeleted) && !jsonDeleted.IsNull)
                deleted = JsonSerializer.Bool.Deserialize(jsonDeleted);
            else
                deleted = false;
            Json.ImmutableJson? doc;
            if (json.AsObject.TryGetValue("doc", out var jsonDoc) && !jsonDoc.IsNull)
                doc = JsonSerializer.Json.Deserialize(jsonDoc);
            else
                doc = null;
            return new CdbChange(id, seq, changes, deleted, doc);
        }
    }

    public sealed class CdbChangesJsonSerializer : Json.Serialization.IJsonSerializer<CdbChanges>
    {
        public static readonly CdbChangesJsonSerializer Instance = new CdbChangesJsonSerializer();

        public Json.ImmutableJson Serialize(CdbChanges value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.LastSeq == null)
                throw new System.ArgumentException("Required property LastSeq is null", nameof(value));
            if (value.Results == null)
                throw new System.ArgumentException("Required property Results is null", nameof(value));
            return new Json.JsonObject
            {
                ["last_seq"] = JsonSerializer.Json.Serialize(value.LastSeq),
                ["results"] = JsonSerializer.ReadOnlyList(CdbChangeJsonSerializer.Instance).Serialize(value.Results)
            };
        }

        public CdbChanges Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var lastSeq = JsonSerializer.Json.Deserialize(json["last_seq"]);
            var results = JsonSerializer.ReadOnlyList(CdbChangeJsonSerializer.Instance).Deserialize(json["results"]);
            return new CdbChanges(lastSeq, results);
        }
    }

    public sealed class CdbDocRowValueJsonSerializer : Json.Serialization.IJsonSerializer<CdbDocRowValue>
    {
        public static readonly CdbDocRowValueJsonSerializer Instance = new CdbDocRowValueJsonSerializer();

        public Json.ImmutableJson Serialize(CdbDocRowValue value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Rev == null)
                throw new System.ArgumentException("Required property Rev is null", nameof(value));
            return new Json.JsonObject
            {
                ["rev"] = JsonSerializer.String.Serialize(value.Rev)
            };
        }

        public CdbDocRowValue Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var rev = JsonSerializer.String.Deserialize(json["rev"]);
            return new CdbDocRowValue(rev);
        }
    }

    public sealed class CdbDocRowJsonSerializer : Json.Serialization.IJsonSerializer<CdbDocRow>
    {
        public static readonly CdbDocRowJsonSerializer Instance = new CdbDocRowJsonSerializer();

        public Json.ImmutableJson Serialize(CdbDocRow value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Id == null)
                throw new System.ArgumentException("Required property Id is null", nameof(value));
            if (value.Key == null)
                throw new System.ArgumentException("Required property Key is null", nameof(value));
            if (value.Value == null)
                throw new System.ArgumentException("Required property Value is null", nameof(value));

            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.String.Serialize(value.Id);
            json["key"] = JsonSerializer.String.Serialize(value.Key);
            json["value"] = CdbDocRowValueJsonSerializer.Instance.Serialize(value.Value);
            if (value.Doc != null)
                json["doc"] = JsonSerializer.Json.Serialize(value.Doc);
            return json;
        }

        public CdbDocRow Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var id = JsonSerializer.String.Deserialize(json["id"]);
            var key = JsonSerializer.String.Deserialize(json["key"]);
            var value = CdbDocRowValueJsonSerializer.Instance.Deserialize(json["value"]);
            Json.ImmutableJson? doc;
            if (json.AsObject.TryGetValue("doc", out var jsonDoc) && !jsonDoc.IsNull)
                doc = JsonSerializer.Json.Deserialize(jsonDoc);
            else
                doc = null;
            return new CdbDocRow(id, key, value, doc);
        }
    }

    public sealed class CdbAllDocsJsonSerializer : Json.Serialization.IJsonSerializer<CdbAllDocs>
    {
        public static readonly CdbAllDocsJsonSerializer Instance = new CdbAllDocsJsonSerializer();

        public Json.ImmutableJson Serialize(CdbAllDocs value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            if (value.Rows == null)
                throw new System.ArgumentException("Required property Rows is null", nameof(value));
            return new Json.JsonObject
            {
                ["total_rows"] = JsonSerializer.Int.Serialize(value.TotalRows),
                ["offset"] = JsonSerializer.Int.Serialize(value.Offset),
                ["rows"] = JsonSerializer.ReadOnlyList(CdbDocRowJsonSerializer.Instance).Serialize(value.Rows)
            };
        }

        public CdbAllDocs Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var totalRows = JsonSerializer.Int.Deserialize(json["total_rows"]);
            var offset = JsonSerializer.Int.Deserialize(json["offset"]);
            var rows = JsonSerializer.ReadOnlyList(CdbDocRowJsonSerializer.Instance).Deserialize(json["rows"]);
            return new CdbAllDocs(totalRows, offset, rows);
        }
    }

    public sealed class CdbDocumentOperationResponseJsonSerializer : Json.Serialization.IJsonSerializer<CdbDocumentOperationResponse>
    {
        public static readonly CdbDocumentOperationResponseJsonSerializer Instance = new CdbDocumentOperationResponseJsonSerializer();

        public Json.ImmutableJson Serialize(CdbDocumentOperationResponse value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Id == null)
                throw new System.ArgumentException("Required property Id is null", nameof(value));

            if (value.Rev == null)
                throw new System.ArgumentException("Required property Rev is null", nameof(value));
            return new Json.JsonObject
            {
                ["id"] = JsonSerializer.String.Serialize(value.Id),
                ["ok"] = JsonSerializer.Bool.Serialize(value.Ok),
                ["rev"] = JsonSerializer.String.Serialize(value.Rev)
            };
        }

        public CdbDocumentOperationResponse Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var id = JsonSerializer.String.Deserialize(json["id"]);
            var ok = JsonSerializer.Bool.Deserialize(json["ok"]);
            var rev = JsonSerializer.String.Deserialize(json["rev"]);
            return new CdbDocumentOperationResponse(id, ok, rev);
        }
    }

    public sealed class CdbAttachmentJsonSerializer : Json.Serialization.IJsonSerializer<CdbAttachment>
    {
        public static readonly CdbAttachmentJsonSerializer Instance = new CdbAttachmentJsonSerializer();

        public Json.ImmutableJson Serialize(CdbAttachment value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.ContentType != null)
                json["content_type"] = JsonSerializer.String.Serialize(value.ContentType);
            if (value.Data != null)
                json["data"] = JsonSerializer.Binary.Serialize(value.Data);
            if (value.Digest != null)
                json["digest"] = JsonSerializer.String.Serialize(value.Digest);
            if (value.EncodedLength.HasValue)
                json["encoded_length"] = JsonSerializer.Int.Serialize(value.EncodedLength.Value);
            if (value.Encoding != null)
                json["encoding"] = JsonSerializer.String.Serialize(value.Encoding);
            if (value.Length.HasValue)
                json["length"] = JsonSerializer.Int.Serialize(value.Length.Value);
            if (value.Revpos.HasValue)
                json["revpos"] = JsonSerializer.Int.Serialize(value.Revpos.Value);
            if (value.Stub.HasValue)
                json["stub"] = JsonSerializer.Bool.Serialize(value.Stub.Value);
            if (value.Follows.HasValue)
                json["follows"] = JsonSerializer.Bool.Serialize(value.Follows.Value);
            return json;
        }

        public CdbAttachment Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new CdbAttachment();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, CdbAttachment value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("content_type", out var jsonContentType) && !jsonContentType.IsNull)
                value.ContentType = JsonSerializer.String.Deserialize(jsonContentType);
            if (json.AsObject.TryGetValue("data", out var jsonData) && !jsonData.IsNull)
                value.Data = JsonSerializer.Binary.Deserialize(jsonData);
            if (json.AsObject.TryGetValue("digest", out var jsonDigest) && !jsonDigest.IsNull)
                value.Digest = JsonSerializer.String.Deserialize(jsonDigest);
            if (json.AsObject.TryGetValue("encoded_length", out var jsonEncodedLength) && !jsonEncodedLength.IsNull)
                value.EncodedLength = JsonSerializer.Int.Deserialize(jsonEncodedLength);
            if (json.AsObject.TryGetValue("encoding", out var jsonEncoding) && !jsonEncoding.IsNull)
                value.Encoding = JsonSerializer.String.Deserialize(jsonEncoding);
            if (json.AsObject.TryGetValue("length", out var jsonLength) && !jsonLength.IsNull)
                value.Length = JsonSerializer.Int.Deserialize(jsonLength);
            if (json.AsObject.TryGetValue("revpos", out var jsonRevpos) && !jsonRevpos.IsNull)
                value.Revpos = JsonSerializer.Int.Deserialize(jsonRevpos);
            if (json.AsObject.TryGetValue("stub", out var jsonStub) && !jsonStub.IsNull)
                value.Stub = JsonSerializer.Bool.Deserialize(jsonStub);
            if (json.AsObject.TryGetValue("follows", out var jsonFollows) && !jsonFollows.IsNull)
                value.Follows = JsonSerializer.Bool.Deserialize(jsonFollows);
        }
    }

    public sealed class CdbDocumentRevisionsJsonSerializer : Json.Serialization.IJsonSerializer<CdbDocumentRevisions>
    {
        public static readonly CdbDocumentRevisionsJsonSerializer Instance = new CdbDocumentRevisionsJsonSerializer();

        public Json.ImmutableJson Serialize(CdbDocumentRevisions value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Ids == null)
                throw new System.ArgumentException("Required property Ids is null", nameof(value));

            return new Json.JsonObject
            {
                ["ids"] = JsonSerializer.ReadOnlyList(JsonSerializer.String).Serialize(value.Ids),
                ["start"] = JsonSerializer.Int.Serialize(value.Start)
            };
        }

        public CdbDocumentRevisions Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var ids = JsonSerializer.ReadOnlyList(JsonSerializer.String).Deserialize(json["ids"]);
            var start = JsonSerializer.Int.Deserialize(json["start"]);
            return new CdbDocumentRevisions(ids, start);
        }
    }

    public sealed class CdbRevisionStatusJsonSerializer : Json.Serialization.IJsonSerializer<CdbRevisionStatus>, Json.Serialization.IJsonKeySerializer<CdbRevisionStatus>
    {
        public static readonly CdbRevisionStatusJsonSerializer Instance = new CdbRevisionStatusJsonSerializer();

        public Json.ImmutableJson Serialize(CdbRevisionStatus value)
        {
            return SerializeKey(value);
        }

        public CdbRevisionStatus Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(CdbRevisionStatus value)
        {
            return value switch
            {
                CdbRevisionStatus.Available => "available",
                CdbRevisionStatus.Missing => "missing",
                CdbRevisionStatus.Deleted => "deleted",
                _ => throw new System.ArgumentOutOfRangeException(nameof(value))
            };
        }

        public CdbRevisionStatus DeserializeKey(string jsonKey)
        {
            return jsonKey switch
            {
                "available" => CdbRevisionStatus.Available,
                "missing" => CdbRevisionStatus.Missing,
                "deleted" => CdbRevisionStatus.Deleted,
                _ => throw new System.ArgumentOutOfRangeException(nameof(jsonKey))
            };
        }
    }

    public sealed class CdbRevisionInfoJsonSerializer : Json.Serialization.IJsonSerializer<CdbRevisionInfo>
    {
        public static readonly CdbRevisionInfoJsonSerializer Instance = new CdbRevisionInfoJsonSerializer();

        public Json.ImmutableJson Serialize(CdbRevisionInfo value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Rev == null)
                throw new System.ArgumentException("Required property Rev is null", nameof(value));

            return new Json.JsonObject
            {
                ["rev"] = JsonSerializer.String.Serialize(value.Rev),
                ["status"] = CdbRevisionStatusJsonSerializer.Instance.Serialize(value.Status)
            };
        }

        public CdbRevisionInfo Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var rev = JsonSerializer.String.Deserialize(json["rev"]);
            var status = CdbRevisionStatusJsonSerializer.Instance.Deserialize(json["status"]);
            return new CdbRevisionInfo(rev, status);
        }
    }

    public sealed class CdbDocumentInfoJsonSerializer : Json.Serialization.IJsonSerializer<CdbDocumentInfo>
    {
        public static readonly CdbDocumentInfoJsonSerializer Instance = new CdbDocumentInfoJsonSerializer();

        public Json.ImmutableJson Serialize(CdbDocumentInfo value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Id == null)
                throw new System.ArgumentException("Required property Id is null", nameof(value));
            if (value.Rev == null)
                throw new System.ArgumentException("Required property Rev is null", nameof(value));

            var json = new Json.JsonObject();
            json["_id"] = JsonSerializer.String.Serialize(value.Id);
            json["_rev"] = JsonSerializer.String.Serialize(value.Rev);
            if (value.Deleted.HasValue)
                json["deleted"] = JsonSerializer.Bool.Serialize(value.Deleted.Value);
            if (value.Attachments != null)
                json["_attachments"] = JsonSerializer.ReadOnlyDict(JsonSerializer.String, CdbAttachmentJsonSerializer.Instance).Serialize(value.Attachments);
            if (value.Conflicts != null)
                json["_conflicts"] = JsonSerializer.Json.Serialize(value.Conflicts);
            if (value.DeletedConflicts != null)
                json["_deleted_conflicts"] = JsonSerializer.Json.Serialize(value.DeletedConflicts);
            if (value.LocalSeq.HasValue)
                json["_local_seq"] = JsonSerializer.Int.Serialize(value.LocalSeq.Value);
            if (value.RevsInfo != null)
                json["_revs_info"] = JsonSerializer.ReadOnlyList(CdbRevisionInfoJsonSerializer.Instance).Serialize(value.RevsInfo);
            if (value.Revisions != null)
                json["_revisions"] = CdbDocumentRevisionsJsonSerializer.Instance.Serialize(value.Revisions);
            return json;
        }

        public CdbDocumentInfo Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var id = JsonSerializer.String.Deserialize(json["_id"]);
            var rev = JsonSerializer.String.Deserialize(json["_rev"]);
            bool? deleted;
            if (json.AsObject.TryGetValue("deleted", out var jsonDeleted) && !jsonDeleted.IsNull)
                deleted = JsonSerializer.Bool.Deserialize(jsonDeleted);
            else
                deleted = null;
            IReadOnlyDictionary<string, CdbAttachment>? attachments;
            if (json.AsObject.TryGetValue("_attachments", out var jsonAttachments) && !jsonAttachments.IsNull)
                attachments = JsonSerializer.ReadOnlyDict(JsonSerializer.String, CdbAttachmentJsonSerializer.Instance).Deserialize(jsonAttachments);
            else
                attachments = null;
            Json.ImmutableJson? conflicts;
            if (json.AsObject.TryGetValue("_conflicts", out var jsonConflicts) && !jsonConflicts.IsNull)
                conflicts = JsonSerializer.Json.Deserialize(jsonConflicts);
            else
                conflicts = null;
            Json.ImmutableJson? deletedConflicts;
            if (json.AsObject.TryGetValue("_deleted_conflicts", out var jsonDeletedConflicts) && !jsonDeletedConflicts.IsNull)
                deletedConflicts = JsonSerializer.Json.Deserialize(jsonDeletedConflicts);
            else
                deletedConflicts = null;
            int? localSeq;
            if (json.AsObject.TryGetValue("_local_seq", out var jsonLocalSeq) && !jsonLocalSeq.IsNull)
                localSeq = JsonSerializer.Int.Deserialize(jsonLocalSeq);
            else
                localSeq = null;
            IReadOnlyList<CdbRevisionInfo>? revsInfo;
            if (json.AsObject.TryGetValue("_revs_info", out var jsonRevsInfo) && !jsonRevsInfo.IsNull)
                revsInfo = JsonSerializer.ReadOnlyList(CdbRevisionInfoJsonSerializer.Instance).Deserialize(jsonRevsInfo);
            else
                revsInfo = null;
            CdbDocumentRevisions? revisions;
            if (json.AsObject.TryGetValue("_revisions", out var jsonRevisions) && !jsonRevisions.IsNull)
                revisions = CdbDocumentRevisionsJsonSerializer.Instance.Deserialize(jsonRevisions);
            else
                revisions = null;
            return new CdbDocumentInfo(id, rev, deleted, attachments, conflicts, deletedConflicts, localSeq, revsInfo, revisions);
        }
    }

    public sealed class CdbViewSpecJsonSerializer : Json.Serialization.IJsonSerializer<CdbViewSpec>
    {
        public static readonly CdbViewSpecJsonSerializer Instance = new CdbViewSpecJsonSerializer();

        public Json.ImmutableJson Serialize(CdbViewSpec value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Map == null)
                throw new System.ArgumentException("Required property Map is null", nameof(value));

            var json = new Json.JsonObject();
            json["map"] = JsonSerializer.String.Serialize(value.Map);
            if (value.Reduce != null)
                json["reduce"] = JsonSerializer.String.Serialize(value.Reduce);
            return json;
        }

        public CdbViewSpec Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var map = JsonSerializer.String.Deserialize(json["map"]);
            string? reduce;
            if (json.AsObject.TryGetValue("reduce", out var jsonReduce) && !jsonReduce.IsNull)
                reduce = JsonSerializer.String.Deserialize(jsonReduce);
            else
                reduce = null;
            return new CdbViewSpec(map, reduce);
        }
    }

    public sealed class CdbViewResultRowJsonSerializer : Json.Serialization.IJsonSerializer<CdbViewResultRow>
    {
        public static readonly CdbViewResultRowJsonSerializer Instance = new CdbViewResultRowJsonSerializer();

        public Json.ImmutableJson Serialize(CdbViewResultRow value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Id == null)
                throw new System.ArgumentException("Required property Id is null", nameof(value));
            if (value.Key == null)
                throw new System.ArgumentException("Required property Key is null", nameof(value));
            if (value.Value == null)
                throw new System.ArgumentException("Required property Value is null", nameof(value));
            return new Json.JsonObject
            {
                ["id"] = JsonSerializer.String.Serialize(value.Id),
                ["key"] = JsonSerializer.Json.Serialize(value.Key),
                ["value"] = JsonSerializer.Json.Serialize(value.Value)
            };
        }

        public CdbViewResultRow Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var id = JsonSerializer.String.Deserialize(json["id"]);
            var key = JsonSerializer.Json.Deserialize(json["key"]);
            var value = JsonSerializer.Json.Deserialize(json["value"]);
            return new CdbViewResultRow(id, key, value);
        }
    }

    public sealed class CdbViewResultJsonSerializer : Json.Serialization.IJsonSerializer<CdbViewResult>
    {
        public static readonly CdbViewResultJsonSerializer Instance = new CdbViewResultJsonSerializer();

        public Json.ImmutableJson Serialize(CdbViewResult value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            if (value.Rows == null)
                throw new System.ArgumentException("Required property Rows is null", nameof(value));

            var json = new Json.JsonObject();
            json["offset"] = JsonSerializer.Int.Serialize(value.Offset);
            json["rows"] = JsonSerializer.ReadOnlyList(CdbViewResultRowJsonSerializer.Instance).Serialize(value.Rows);
            json["total_rows"] = JsonSerializer.Int.Serialize(value.TotalRows);
            if (value.UpdateSeq.HasValue)
                json["update_seq"] = JsonSerializer.Int.Serialize(value.UpdateSeq.Value);
            return json;
        }

        public CdbViewResult Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var offset = JsonSerializer.Int.Deserialize(json["offset"]);
            var rows = JsonSerializer.ReadOnlyList(CdbViewResultRowJsonSerializer.Instance).Deserialize(json["rows"]);
            var totalRows = JsonSerializer.Int.Deserialize(json["total_rows"]);
            int? updateSeq;
            if (json.AsObject.TryGetValue("update_seq", out var jsonUpdateSeq) && !jsonUpdateSeq.IsNull)
                updateSeq = JsonSerializer.Int.Deserialize(jsonUpdateSeq);
            else
                updateSeq = null;
            return new CdbViewResult(offset, rows, totalRows, updateSeq);
        }
    }

    public sealed class CdbReplicationDatabaseJsonSerializer : Json.Serialization.IJsonSerializer<CdbReplicationDatabase>
    {
        public static readonly CdbReplicationDatabaseJsonSerializer Instance = new CdbReplicationDatabaseJsonSerializer();

        public Json.ImmutableJson Serialize(CdbReplicationDatabase value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Url == null)
                throw new System.ArgumentException("Required property Url is null", nameof(value));
            if (value.Headers == null)
                throw new System.ArgumentException("Required property Headers is null", nameof(value));
            return new Json.JsonObject
            {
                ["url"] = UriJsonSerializer.Instance.Serialize(value.Url),
                ["headers"] = JsonSerializer.ReadOnlyDict(JsonSerializer.String, JsonSerializer.String).Serialize(value.Headers)
            };
        }

        public CdbReplicationDatabase Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var url = UriJsonSerializer.Instance.Deserialize(json["url"]);
            IReadOnlyDictionary<string, string> headers;
            if (json.AsObject.TryGetValue("headers", out var jsonHeaders) && !jsonHeaders.IsNull)
                headers = JsonSerializer.ReadOnlyDict(JsonSerializer.String, JsonSerializer.String).Deserialize(jsonHeaders);
            else
                headers = new Dictionary<string, string>();
            return new CdbReplicationDatabase(url, headers);
        }
    }

    public sealed class CdbReplicationRequestJsonSerializer : Json.Serialization.IJsonSerializer<CdbReplicationRequest>
    {
        public static readonly CdbReplicationRequestJsonSerializer Instance = new CdbReplicationRequestJsonSerializer();

        public Json.ImmutableJson Serialize(CdbReplicationRequest value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Source == null)
                throw new System.ArgumentException("Required property Source is null", nameof(value));
            if (value.Target == null)
                throw new System.ArgumentException("Required property Target is null", nameof(value));

            var json = new Json.JsonObject();
            json["source"] = CdbReplicationDatabaseJsonSerializer.Instance.Serialize(value.Source);
            json["target"] = CdbReplicationDatabaseJsonSerializer.Instance.Serialize(value.Target);
            if (value.Cancel.HasValue)
                json["cancel"] = JsonSerializer.Bool.Serialize(value.Cancel.Value);
            if (value.Continuous.HasValue)
                json["continuous"] = JsonSerializer.Bool.Serialize(value.Continuous.Value);
            if (value.CreateTarget.HasValue)
                json["create_target"] = JsonSerializer.Bool.Serialize(value.CreateTarget.Value);
            if (value.DocIds != null)
                json["doc_ids"] = JsonSerializer.ReadOnlyList(JsonSerializer.String).Serialize(value.DocIds);
            if (value.Proxy != null)
                json["proxy"] = JsonSerializer.String.Serialize(value.Proxy);
            return json;
        }

        public CdbReplicationRequest Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var source = CdbReplicationDatabaseJsonSerializer.Instance.Deserialize(json["source"]);
            var target = CdbReplicationDatabaseJsonSerializer.Instance.Deserialize(json["target"]);
            bool? cancel;
            if (json.AsObject.TryGetValue("cancel", out var jsonCancel) && !jsonCancel.IsNull)
                cancel = JsonSerializer.Bool.Deserialize(jsonCancel);
            else
                cancel = null;
            bool? continuous;
            if (json.AsObject.TryGetValue("continuous", out var jsonContinuous) && !jsonContinuous.IsNull)
                continuous = JsonSerializer.Bool.Deserialize(jsonContinuous);
            else
                continuous = null;
            bool? createTarget;
            if (json.AsObject.TryGetValue("create_target", out var jsonCreateTarget) && !jsonCreateTarget.IsNull)
                createTarget = JsonSerializer.Bool.Deserialize(jsonCreateTarget);
            else
                createTarget = null;
            IReadOnlyList<string>? docIds;
            if (json.AsObject.TryGetValue("doc_ids", out var jsonDocIds) && !jsonDocIds.IsNull)
                docIds = JsonSerializer.ReadOnlyList(JsonSerializer.String).Deserialize(jsonDocIds);
            else
                docIds = null;
            string? proxy;
            if (json.AsObject.TryGetValue("proxy", out var jsonProxy) && !jsonProxy.IsNull)
                proxy = JsonSerializer.String.Deserialize(jsonProxy);
            else
                proxy = null;
            return new CdbReplicationRequest(source, target, cancel, continuous, createTarget, docIds, proxy);
        }
    }

    public sealed class CdbReplicationResultJsonSerializer : Json.Serialization.IJsonSerializer<CdbReplicationResult>
    {
        public static readonly CdbReplicationResultJsonSerializer Instance = new CdbReplicationResultJsonSerializer();

        public Json.ImmutableJson Serialize(CdbReplicationResult value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.History == null)
                throw new System.ArgumentException("Required property History is null", nameof(value));

            if (value.SessionId == null)
                throw new System.ArgumentException("Required property SessionId is null", nameof(value));
            if (value.SourceLastSeq == null)
                throw new System.ArgumentException("Required property SourceLastSeq is null", nameof(value));
            return new Json.JsonObject
            {
                ["history"] = JsonSerializer.ReadOnlyList(CdbReplicationHistoryJsonSerializer.Instance).Serialize(value.History),
                ["ok"] = JsonSerializer.Bool.Serialize(value.Ok),
                ["replication_id_version"] = JsonSerializer.Int.Serialize(value.ReplicationIdVersion),
                ["session_id"] = JsonSerializer.String.Serialize(value.SessionId),
                ["source_last_seq"] = JsonSerializer.Json.Serialize(value.SourceLastSeq)
            };
        }

        public CdbReplicationResult Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var history = JsonSerializer.ReadOnlyList(CdbReplicationHistoryJsonSerializer.Instance).Deserialize(json["history"]);
            var ok = JsonSerializer.Bool.Deserialize(json["ok"]);
            var replicationIdVersion = JsonSerializer.Int.Deserialize(json["replication_id_version"]);
            var sessionId = JsonSerializer.String.Deserialize(json["session_id"]);
            var sourceLastSeq = JsonSerializer.Json.Deserialize(json["source_last_seq"]);
            return new CdbReplicationResult(history, ok, replicationIdVersion, sessionId, sourceLastSeq);
        }
    }

    public sealed class CdbReplicationHistoryJsonSerializer : Json.Serialization.IJsonSerializer<CdbReplicationHistory>
    {
        public static readonly CdbReplicationHistoryJsonSerializer Instance = new CdbReplicationHistoryJsonSerializer();

        public Json.ImmutableJson Serialize(CdbReplicationHistory value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            if (value.EndLastSeq == null)
                throw new System.ArgumentException("Required property EndLastSeq is null", nameof(value));
            if (value.EndTime == null)
                throw new System.ArgumentException("Required property EndTime is null", nameof(value));

            if (value.RecordedSeq == null)
                throw new System.ArgumentException("Required property RecordedSeq is null", nameof(value));
            if (value.SessionId == null)
                throw new System.ArgumentException("Required property SessionId is null", nameof(value));

            if (value.StartTime == null)
                throw new System.ArgumentException("Required property StartTime is null", nameof(value));
            return new Json.JsonObject
            {
                ["doc_write_failures"] = JsonSerializer.Int.Serialize(value.DocWriteFailures),
                ["docs_read"] = JsonSerializer.Int.Serialize(value.DocsRead),
                ["docs_written"] = JsonSerializer.Int.Serialize(value.DocsWritten),
                ["end_last_seq"] = JsonSerializer.Json.Serialize(value.EndLastSeq),
                ["end_time"] = JsonSerializer.String.Serialize(value.EndTime),
                ["missing_checked"] = JsonSerializer.Int.Serialize(value.MissingChecked),
                ["missing_found"] = JsonSerializer.Int.Serialize(value.MissingFound),
                ["recorded_seq"] = JsonSerializer.Json.Serialize(value.RecordedSeq),
                ["session_id"] = JsonSerializer.String.Serialize(value.SessionId),
                ["start_last_seq"] = JsonSerializer.Int.Serialize(value.StartLastSeq),
                ["start_time"] = JsonSerializer.String.Serialize(value.StartTime)
            };
        }

        public CdbReplicationHistory Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var docWriteFailures = JsonSerializer.Int.Deserialize(json["doc_write_failures"]);
            var docsRead = JsonSerializer.Int.Deserialize(json["docs_read"]);
            var docsWritten = JsonSerializer.Int.Deserialize(json["docs_written"]);
            var endLastSeq = JsonSerializer.Json.Deserialize(json["end_last_seq"]);
            var endTime = JsonSerializer.String.Deserialize(json["end_time"]);
            var missingChecked = JsonSerializer.Int.Deserialize(json["missing_checked"]);
            var missingFound = JsonSerializer.Int.Deserialize(json["missing_found"]);
            var recordedSeq = JsonSerializer.Json.Deserialize(json["recorded_seq"]);
            var sessionId = JsonSerializer.String.Deserialize(json["session_id"]);
            var startLastSeq = JsonSerializer.Int.Deserialize(json["start_last_seq"]);
            var startTime = JsonSerializer.String.Deserialize(json["start_time"]);
            return new CdbReplicationHistory(docWriteFailures, docsRead, docsWritten, endLastSeq, endTime, missingChecked, missingFound, recordedSeq, sessionId, startLastSeq, startTime);
        }
    }
}
