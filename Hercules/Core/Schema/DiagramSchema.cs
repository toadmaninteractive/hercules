// Author: Igor compiler
// Compiler version: igorc 2.1.3
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;

using JsonSerializer = Json.Serialization.JsonSerializer;

namespace Igor.Schema
{
    public enum ConnectorType
    {
        In = 1,
        Out = 2,
        Property = 3,
        Asset = 4,
    }

    public sealed class Connector
    {
        public string Name { get; }

        public ConnectorType Type { get; }

        public string Position { get; }

        public string? Field { get; }

        public string? Color { get; }

        public string? Caption { get; }

        public string? Category { get; }

        public Connector(string name, ConnectorType type, string position, string? field = null, string? color = null, string? caption = null, string? category = null)
        {
            if (name == null)
                throw new System.ArgumentNullException(nameof(name));

            if (position == null)
                throw new System.ArgumentNullException(nameof(position));

            this.Name = name;
            this.Type = type;
            this.Position = position;
            this.Field = field;
            this.Color = color;
            this.Caption = caption;
            this.Category = category;
        }
    }

    public sealed class Prototype
    {
        public string Name { get; }

        public string CustomType { get; }

        public string Archetype { get; }

        public string? Icon { get; }

        public string? Color { get; }

        public string? Caption { get; }

        public bool? ShowIcon { get; }

        public IReadOnlyDictionary<string, string> SpecialFields { get; }

        public IReadOnlyList<Connector> Connectors { get; }

        public Prototype(string name, string customType, string archetype, string? icon, string? color, string? caption, bool? showIcon, IReadOnlyDictionary<string, string> specialFields, IReadOnlyList<Connector> connectors)
        {
            if (name == null)
                throw new System.ArgumentNullException(nameof(name));
            if (customType == null)
                throw new System.ArgumentNullException(nameof(customType));
            if (archetype == null)
                throw new System.ArgumentNullException(nameof(archetype));

            if (specialFields == null)
                throw new System.ArgumentNullException(nameof(specialFields));
            if (connectors == null)
                throw new System.ArgumentNullException(nameof(connectors));
            this.Name = name;
            this.CustomType = customType;
            this.Archetype = archetype;
            this.Icon = icon;
            this.Color = color;
            this.Caption = caption;
            this.ShowIcon = showIcon;
            this.SpecialFields = specialFields;
            this.Connectors = connectors;
        }
    }

    public sealed class DiagramSchema
    {
        public IReadOnlyList<Prototype> Prototypes { get; }

        public IReadOnlyList<string> DiagramTags { get; }

        public string Version { get; }

        public DiagramSchema(IReadOnlyList<Prototype> prototypes, IReadOnlyList<string> diagramTags, string version = "1.0")
        {
            if (prototypes == null)
                throw new System.ArgumentNullException(nameof(prototypes));
            if (diagramTags == null)
                throw new System.ArgumentNullException(nameof(diagramTags));
            if (version == null)
                throw new System.ArgumentNullException(nameof(version));
            this.Prototypes = prototypes;
            this.DiagramTags = diagramTags;
            this.Version = version;
        }
    }

    public sealed class ConnectorTypeJsonSerializer : Json.Serialization.IJsonSerializer<ConnectorType>, Json.Serialization.IJsonKeySerializer<ConnectorType>
    {
        public static readonly ConnectorTypeJsonSerializer Instance = new ConnectorTypeJsonSerializer();

        public Json.ImmutableJson Serialize(ConnectorType value)
        {
            return SerializeKey(value);
        }

        public ConnectorType Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ConnectorType value)
        {
            return value switch
            {
                ConnectorType.In => "in",
                ConnectorType.Out => "out",
                ConnectorType.Property => "property",
                ConnectorType.Asset => "asset",
                _ => throw new System.ArgumentOutOfRangeException(nameof(value))
            };
        }

        public ConnectorType DeserializeKey(string jsonKey)
        {
            return jsonKey switch
            {
                "in" => ConnectorType.In,
                "out" => ConnectorType.Out,
                "property" => ConnectorType.Property,
                "asset" => ConnectorType.Asset,
                _ => throw new System.ArgumentOutOfRangeException(nameof(jsonKey))
            };
        }
    }

    public sealed class ConnectorJsonSerializer : Json.Serialization.IJsonSerializer<Connector>
    {
        public static readonly ConnectorJsonSerializer Instance = new ConnectorJsonSerializer();

        public Json.ImmutableJson Serialize(Connector value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Name == null)
                throw new System.ArgumentException("Required property Name is null", nameof(value));

            if (value.Position == null)
                throw new System.ArgumentException("Required property Position is null", nameof(value));

            var json = new Json.JsonObject();
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            json["type"] = ConnectorTypeJsonSerializer.Instance.Serialize(value.Type);
            json["position"] = JsonSerializer.String.Serialize(value.Position);
            if (value.Field != null)
                json["field"] = JsonSerializer.String.Serialize(value.Field);
            if (value.Color != null)
                json["color"] = JsonSerializer.String.Serialize(value.Color);
            if (value.Caption != null)
                json["caption"] = JsonSerializer.String.Serialize(value.Caption);
            if (value.Category != null)
                json["category"] = JsonSerializer.String.Serialize(value.Category);
            return json;
        }

        public Connector Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var name = JsonSerializer.String.Deserialize(json["name"]);
            var type = ConnectorTypeJsonSerializer.Instance.Deserialize(json["type"]);
            var position = JsonSerializer.String.Deserialize(json["position"]);
            string? field;
            if (json.AsObject.TryGetValue("field", out var jsonField) && !jsonField.IsNull)
                field = JsonSerializer.String.Deserialize(jsonField);
            else
                field = null;
            string? color;
            if (json.AsObject.TryGetValue("color", out var jsonColor) && !jsonColor.IsNull)
                color = JsonSerializer.String.Deserialize(jsonColor);
            else
                color = null;
            string? caption;
            if (json.AsObject.TryGetValue("caption", out var jsonCaption) && !jsonCaption.IsNull)
                caption = JsonSerializer.String.Deserialize(jsonCaption);
            else
                caption = null;
            string? category;
            if (json.AsObject.TryGetValue("category", out var jsonCategory) && !jsonCategory.IsNull)
                category = JsonSerializer.String.Deserialize(jsonCategory);
            else
                category = null;
            return new Connector(name, type, position, field, color, caption, category);
        }
    }

    public sealed class PrototypeJsonSerializer : Json.Serialization.IJsonSerializer<Prototype>
    {
        public static readonly PrototypeJsonSerializer Instance = new PrototypeJsonSerializer();

        public Json.ImmutableJson Serialize(Prototype value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Name == null)
                throw new System.ArgumentException("Required property Name is null", nameof(value));
            if (value.CustomType == null)
                throw new System.ArgumentException("Required property CustomType is null", nameof(value));
            if (value.Archetype == null)
                throw new System.ArgumentException("Required property Archetype is null", nameof(value));

            if (value.SpecialFields == null)
                throw new System.ArgumentException("Required property SpecialFields is null", nameof(value));
            if (value.Connectors == null)
                throw new System.ArgumentException("Required property Connectors is null", nameof(value));
            var json = new Json.JsonObject();
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            json["custom_type"] = JsonSerializer.String.Serialize(value.CustomType);
            json["archetype"] = JsonSerializer.String.Serialize(value.Archetype);
            if (value.Icon != null)
                json["icon"] = JsonSerializer.String.Serialize(value.Icon);
            if (value.Color != null)
                json["color"] = JsonSerializer.String.Serialize(value.Color);
            if (value.Caption != null)
                json["caption"] = JsonSerializer.String.Serialize(value.Caption);
            if (value.ShowIcon.HasValue)
                json["show_icon"] = JsonSerializer.Bool.Serialize(value.ShowIcon.Value);
            json["special_fields"] = JsonSerializer.ReadOnlyDict(JsonSerializer.String, JsonSerializer.String).Serialize(value.SpecialFields);
            json["connectors"] = JsonSerializer.ReadOnlyList(ConnectorJsonSerializer.Instance).Serialize(value.Connectors);
            return json;
        }

        public Prototype Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var name = JsonSerializer.String.Deserialize(json["name"]);
            var customType = JsonSerializer.String.Deserialize(json["custom_type"]);
            var archetype = JsonSerializer.String.Deserialize(json["archetype"]);
            string? icon;
            if (json.AsObject.TryGetValue("icon", out var jsonIcon) && !jsonIcon.IsNull)
                icon = JsonSerializer.String.Deserialize(jsonIcon);
            else
                icon = null;
            string? color;
            if (json.AsObject.TryGetValue("color", out var jsonColor) && !jsonColor.IsNull)
                color = JsonSerializer.String.Deserialize(jsonColor);
            else
                color = null;
            string? caption;
            if (json.AsObject.TryGetValue("caption", out var jsonCaption) && !jsonCaption.IsNull)
                caption = JsonSerializer.String.Deserialize(jsonCaption);
            else
                caption = null;
            bool? showIcon;
            if (json.AsObject.TryGetValue("show_icon", out var jsonShowIcon) && !jsonShowIcon.IsNull)
                showIcon = JsonSerializer.Bool.Deserialize(jsonShowIcon);
            else
                showIcon = null;
            IReadOnlyDictionary<string, string> specialFields;
            if (json.AsObject.TryGetValue("special_fields", out var jsonSpecialFields) && !jsonSpecialFields.IsNull)
                specialFields = JsonSerializer.ReadOnlyDict(JsonSerializer.String, JsonSerializer.String).Deserialize(jsonSpecialFields);
            else
                specialFields = new Dictionary<string, string>();
            IReadOnlyList<Connector> connectors;
            if (json.AsObject.TryGetValue("connectors", out var jsonConnectors) && !jsonConnectors.IsNull)
                connectors = JsonSerializer.ReadOnlyList(ConnectorJsonSerializer.Instance).Deserialize(jsonConnectors);
            else
                connectors = System.Array.Empty<Connector>();
            return new Prototype(name, customType, archetype, icon, color, caption, showIcon, specialFields, connectors);
        }
    }

    public sealed class DiagramSchemaJsonSerializer : Json.Serialization.IJsonSerializer<DiagramSchema>
    {
        public static readonly DiagramSchemaJsonSerializer Instance = new DiagramSchemaJsonSerializer();

        public Json.ImmutableJson Serialize(DiagramSchema value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Prototypes == null)
                throw new System.ArgumentException("Required property Prototypes is null", nameof(value));
            if (value.DiagramTags == null)
                throw new System.ArgumentException("Required property DiagramTags is null", nameof(value));
            if (value.Version == null)
                throw new System.ArgumentException("Required property Version is null", nameof(value));
            return new Json.JsonObject
            {
                ["prototypes"] = JsonSerializer.ReadOnlyList(PrototypeJsonSerializer.Instance).Serialize(value.Prototypes),
                ["diagram_tags"] = JsonSerializer.ReadOnlyList(JsonSerializer.String).Serialize(value.DiagramTags),
                ["version"] = JsonSerializer.String.Serialize(value.Version)
            };
        }

        public DiagramSchema Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            IReadOnlyList<Prototype> prototypes;
            if (json.AsObject.TryGetValue("prototypes", out var jsonPrototypes) && !jsonPrototypes.IsNull)
                prototypes = JsonSerializer.ReadOnlyList(PrototypeJsonSerializer.Instance).Deserialize(jsonPrototypes);
            else
                prototypes = System.Array.Empty<Prototype>();
            IReadOnlyList<string> diagramTags;
            if (json.AsObject.TryGetValue("diagram_tags", out var jsonDiagramTags) && !jsonDiagramTags.IsNull)
                diagramTags = JsonSerializer.ReadOnlyList(JsonSerializer.String).Deserialize(jsonDiagramTags);
            else
                diagramTags = System.Array.Empty<string>();
            string version;
            if (json.AsObject.TryGetValue("version", out var jsonVersion) && !jsonVersion.IsNull)
                version = JsonSerializer.String.Deserialize(jsonVersion);
            else
                version = "1.0";
            return new DiagramSchema(prototypes, diagramTags, version);
        }
    }
}
